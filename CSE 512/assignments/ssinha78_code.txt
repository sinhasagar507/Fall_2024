Task 2
Query:
[
  {
    $group: {
      _id: "$customer_id",
      order_count: {
        $sum: 1,
      },
    },
  },
  {
    $sort:
      /**
       * Provide any number of field/order pairs.
       */
      {
        order_count: -1,
      },
  },
  {
    $out:
      /**
       * Provide the name of the output collection.
       */
      "task_2",
  },
]


Task 3 
[
  // Unwind the products array to have one product per document
  {
    $unwind: "$products",
  },
  // Lookup product details from the products collection
  {
    $lookup: {
      from: "products",
      localField: "products.product_id",
      foreignField: "product_id",
      as: "product_details",
    },
  },
  // Unwind the product_details array (since $lookup returns an array)
  {
    $unwind: "$product_details",
  },
  // Group by category to calculate the metrics
  {
    $group: {
      _id: "$product_details.category",
      total_orders: {
        $sum: 1,
      },
      total_revenue: {
        $sum: {
          $multiply: [
            "$products.quantity",
            "$product_details.price",
          ],
        },
      },
      avg_price: {
        $avg: "$product_details.price",
      },
    },
  },
  // Optionally, you can sort by total revenue or total orders
  {
    $sort: {
      total_revenue: -1,
    },
  },
  {
    $out: "task_3",
  },
]

Task 4 
Query:
[
  // Lookup customer details to get the city information
  {
    $lookup: {
      from: "customers",
      localField: "customer_id",
      foreignField: "customer_id",
      as: "customer_details"
    }
  },
  // Unwind the customer details (since $lookup returns an array)
  {
    $unwind: "$customer_details"
  },
  // Group by city to calculate the metrics
  {
    $group: {
      _id: "$customer_details.city",
      total_orders: { $sum: 1 },
      total_revenue: { $sum: "$total_price" },
      avg_order_value: { $avg: "$total_price" }
    }
  },
  // Filter cities where the average order value exceeds $500
  {
    $match: {
      avg_order_value: { $gt: 500 }
    }
  },
  // Sort by total orders in descending order
  {
    $sort: { total_orders: -1 }
  },
  {
    $out: "task_4",
  }
]
